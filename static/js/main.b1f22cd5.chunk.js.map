{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","findUserById","userId","usersFromServer","find","todosArr","App","useState","setTitle","selectUserId","setSelectUserId","setTodos","isTitleValid","setIsTitleValid","isSelectUserIdValid","setIsSelectUserIdValid","action","method","onSubmit","event","preventDefault","trim","currentTodos","reduce","maxId","Math","max","type","value","placeholder","onChange","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1f22cd5.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    user,\n    title,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\n\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst findUserById = (userId: number) => {\n  return usersFromServer.find((user) => user.id === userId) || null;\n};\n\nconst todosArr: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: findUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [selectUserId, setSelectUserId] = useState('0');\n  const [todos, setTodos] = useState<Todo[]>(todosArr);\n  const [isTitleValid, setIsTitleValid] = useState(true);\n  const [isSelectUserIdValid, setIsSelectUserIdValid] = useState(true);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^a-zA-Zа-яА-ЯЄєІіЇїҐґ0-9\\s]/g, ''));\n    setIsTitleValid(true);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUserId(event.target.value);\n    setIsSelectUserIdValid(true);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (title.trim() === '') {\n      setIsTitleValid(false);\n    }\n\n    if (selectUserId === '0') {\n      setIsSelectUserIdValid(false);\n    }\n\n    if (title.trim() && (selectUserId !== '0')) {\n      setTodos((currentTodos) => {\n        return [\n          ...currentTodos,\n          {\n            id: todos.reduce((maxId, todo) => Math.max(maxId, todo.id), 0) + 1,\n            title: title.trim(),\n            userId: +selectUserId,\n            completed: false,\n            user: findUserById(+selectUserId),\n          },\n        ];\n      });\n\n      setTitle('');\n      setSelectUserId('0');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={title}\n              placeholder=\"Please enter a title\"\n              onChange={handleInputChange}\n            />\n            {!isTitleValid && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={selectUserId}\n              onChange={handleSelectChange}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {!isSelectUserIdValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}